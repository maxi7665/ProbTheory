1. ./obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

2. ./obj/Debug/net8.0/Core.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Core")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Core")]
[assembly: System.Reflection.AssemblyTitleAttribute("Core")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Создано классом WriteCodeFragment MSBuild.


3. ./obj/Debug/net8.0/Core.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

4. ./obj/Debug/net8.0/Lab1.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Lab1")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Lab1")]
[assembly: System.Reflection.AssemblyTitleAttribute("Lab1")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Создано классом WriteCodeFragment MSBuild.


5. ./obj/Debug/net8.0/Lab1.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

6. ./obj/Debug/net8.0/ProbTheory.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ProbTheory")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("ProbTheory")]
[assembly: System.Reflection.AssemblyTitleAttribute("ProbTheory")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Создано классом WriteCodeFragment MSBuild.


7. ./obj/Debug/net8.0/ProbTheory.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

8. ./PlotDescriptor.cs
﻿using ScottPlot;
using System.Reflection;

namespace Core
{
    public class PlotDescriptor
    {
        public List<PlotSegment> Segments { get; set; } = new();

        public double MinX { get; set; } = 0;

        public double MaxX { get; set; } = 1;

        public List<Coordinates> GetCoords(double fromX, double toX, double step = 0.01)
        {
            var ret = new SortedList<double, Coordinates>();

            foreach (var segment in Segments)
            {
                var segmentFromX = Math.Max(fromX, segment.MinX);
                var segmentToX = Math.Min(toX, segment.MaxX);

                double x = segmentFromX;

                for (int i = 0; x <= segmentToX ; i++)
                {
                    x = segmentFromX + (i * step);

                    var coords = new Coordinates(x, segment.Func(x));

                    ret.Add(x, coords);
                }
            }

            return ret.ToList().ConvertAll(v => v.Value);
        }
    }
}

9. ./PlotSegment.cs
﻿namespace Core
{
    /// <summary>
    /// Segment of plot
    /// </summary>
    public class PlotSegment
    {
        public Func<double, double> Func { get; set; } = (x) => x;

        public double MinX { get; set; } = double.MinValue;

        public double MaxX { get; set; } = double.MaxValue;

        public double Step { get; set; } = 0.01;

        public List<double> GetXCoords()
        {
            var ret = new List<double>();            

            for (double i = MinX; i <= MaxX; i += Step)
            {
                ret.Add(i);
            }

            return ret;
        }

        public List<double> GetYCoords()
        {
            var ret = GetXCoords().ConvertAll(x => Func(x));

            return ret;
        }

        public bool HasMapping(double x) => x <= MaxX && x >= MinX;
    }
}

10. ./Program.cs
﻿// See https://aka.ms/new-console-template for more information
using Core;
using ScottPlot;

Console.WriteLine("Hello, World!");

Plot myPlot = new();


var plotDescriptor = new PlotDescriptor();

var plotSegment = new PlotSegment()
{
    MinX = 0,
    MaxX = 1
};

plotDescriptor.Segments.Add(plotSegment);


plotDescriptor.Segments.Add(new PlotSegment()
{
    Func = (x) => 0,
    MaxX = -0.001
});

plotDescriptor.Segments.Add(new PlotSegment()
{
    Func = (x) => 0,
    MinX = 1.001
});

var values = plotDescriptor.GetCoords(-0.1, 1.1, 0.001);

var scatter = myPlot.Add.Scatter(
    values);

scatter.LineStyle.Width = 5;
scatter.MarkerStyle.Size = 5;

var fileName = "demo.png";

myPlot.SavePng(fileName, 800, 600);

Utils.OpenPath(fileName);

11. ./Utils.cs
﻿using System.Diagnostics;

namespace Core
{
    public class Utils
    {
        public static void OpenPath(string fileName)
        {
            var processStart = new ProcessStartInfo()
            {
                FileName = "cmd",
                Arguments = $"/c {fileName}"
            };

            var process = new Process();

            process.StartInfo = processStart;

            process.Start();
        }

        public static double[] GetUniformRandomValues(int count)
        {
            var randomValues = new double[count];

            var random = new Random();

            for (int i = 0; i < count; i++)
            {
                randomValues[i] = random.NextDouble();
            }

            return randomValues;
        }

        public static async Task SaveValues(string fileName, double[] values)
        {
            await File.AppendAllLinesAsync(
                fileName, 
                values.Select(v => v.ToString()));
        }

        public static async Task<double[]> ReadValues(string fileName)
        {
            return (await File.ReadAllLinesAsync(fileName))
                .Select(double.Parse)
                .ToArray();
        }
    }
}

