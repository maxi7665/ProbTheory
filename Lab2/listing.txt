1. ./Lab2.cs
﻿
using Core;
using Lab2.Processing;
using Markdig;
using ScottPlot;
using ScottPlot.Colormaps;
using System.Runtime.CompilerServices;
using System.Text;
using System.Web;

namespace Lab2
{
    internal class Lab2
    {
        private const string TMP_DIRECTORY_NAME = "tmp";

        private const string UNIFORM_100_FILENAME = $"2_uniform_100.txt";
        private const string UNIFORM_1000_FILENAME = $"2_uniform_1000.txt";
        private const string GAUSS_100_FILENAME = $"2_gauss_100.txt";
        private const string GAUSS_1000_FILENAME = $"2_gauss_1000.txt";

        private static readonly string REPORT_FILENAME = "report.html";

        private const int VARIANT = 2;

        private static readonly double _a = (double)-VARIANT / 10;
        private static readonly double _b = (double)VARIANT / 2;

        private static readonly double _m = (double)VARIANT;
        private static readonly double _sigma = (double)VARIANT / 3;

        public static async Task Main(string[] args)
        {
            await PrepareDataSet();

            var uniform100Values = await Utils.ReadValues(UNIFORM_100_FILENAME);
            var uniform1000Values = await Utils.ReadValues(UNIFORM_1000_FILENAME);
            var gauss100Values = await Utils.ReadValues(GAUSS_100_FILENAME);
            var gauss1000Values = await Utils.ReadValues(GAUSS_1000_FILENAME);

            await PrepareFileEnvironment();

            await File.AppendAllLinesAsync(REPORT_FILENAME, [Markdown.ToHtml($"# Лабораторная работа №2")]);
            await File.AppendAllLinesAsync(REPORT_FILENAME, [Markdown.ToHtml($"## Равномерное распределение, l = 100")]);

            await ProcessValues(uniform100Values);

            await File.AppendAllLinesAsync(REPORT_FILENAME, [Markdown.ToHtml($"## Равномерное распределение, l = 1000")]);
            await ProcessValues(uniform1000Values);

            await File.AppendAllLinesAsync(REPORT_FILENAME, [Markdown.ToHtml($"## Нормальное распределение, l = 100")]);
            await ProcessValues(gauss100Values);

            await File.AppendAllLinesAsync(REPORT_FILENAME, [Markdown.ToHtml($"## Нормальное распределение, l = 1000")]);
            await ProcessValues(gauss1000Values);

            Utils.OpenPath(REPORT_FILENAME);
        }

        private static async Task PrepareFileEnvironment()
        {
            if (File.Exists(REPORT_FILENAME))
            {
                File.Delete(REPORT_FILENAME);
            }

            await File.WriteAllLinesAsync(REPORT_FILENAME, 
                [@"
                <style>
                table, th, td {
                       border: 1px solid black;
                }
                </style>"]);

            if (Directory.Exists(TMP_DIRECTORY_NAME))
            {
                Directory.Delete(TMP_DIRECTORY_NAME, true);
            }

            if (!Directory.Exists(TMP_DIRECTORY_NAME))
            {
                Directory.CreateDirectory(TMP_DIRECTORY_NAME);
            }
        }

        private static async Task ProcessValues(
            double[] values, 
            string name = "График")
        {
            var markdown = new StringBuilder();

            markdown.AppendLine($"{name}");

            var stats = Metrics.CountMetrics(values, [5, 7]);

            var segmentStatistics = stats.QSegmentStatistics[5];

            markdown.AppendLine(Markdown.ToHtml($"### Статистические показатели"));

            markdown.AppendLine(BuildStatisticsHtml(stats));

            string fileName = BuildBars(segmentStatistics);

            markdown.AppendLine(Markdown.ToHtml($"### q = 5"));
            markdown.AppendLine(BuildTableHtml(segmentStatistics));
            
            markdown.AppendLine(HttpUtility.UrlDecode(Markdown.ToHtml($"![График]({fileName} \"График q = 5\")")));

            segmentStatistics = stats.QSegmentStatistics[7];

            fileName = BuildBars(segmentStatistics);

            markdown.AppendLine(Markdown.ToHtml($"### q = 7"));
            markdown.AppendLine(BuildTableHtml(segmentStatistics));            
            markdown.AppendLine(HttpUtility.UrlDecode(Markdown.ToHtml($"![График]({fileName} \"График q = 7\")")));

            var html = markdown.ToString();

            await File.AppendAllLinesAsync(REPORT_FILENAME, [html]);
        }

        private static string BuildStatisticsHtml(DataSetMetrics metrics)
        {
            var markdown = new StringBuilder();

            markdown.AppendLine($"+ Мат. ожидание {metrics.ExpectValue}");
            markdown.AppendLine($"+ Медиана {metrics.Median}");
            markdown.AppendLine($"+ Мода {metrics.Mode}");
            markdown.AppendLine($"+ Дисперсия {metrics.D}");
            markdown.AppendLine($"+ Ср. кв. откл. {metrics.Sigma}");

            return Markdown.ToHtml(markdown.ToString());
        }

        private static MarkdownPipeline pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .Build();

        private static string BuildTableHtml(SegmentStatistics segmentStatistics)
        {
            var markdown = new StringBuilder();

            markdown.AppendLine("| Номер интервала  | x j  |  x j\\+1 |  n j  |");
            markdown.AppendLine("|------------------|------|--------|-------|");

            int cnt = 0;

            foreach (var segment in segmentStatistics.Parts)
            {
                cnt++;

                markdown.AppendLine($"| {cnt} | {Math.Round(segment.Value.From, 3)} | " +
                    $"{Math.Round(segment.Value.To, 3)} | {segment.Value.Values.Length} |");
            }

            markdown.AppendLine($"| Сумма |  |  | {segmentStatistics.ValuesCount} |");

            return Markdown.ToHtml(markdown.ToString(), pipeline);
        }

        private static string BuildBars(SegmentStatistics statistics)
        {
            var plot = PlotBuilder.BuildGistogram(statistics);

            var fileName = Path.GetRandomFileName() + ".png";

            fileName = Path.Combine(TMP_DIRECTORY_NAME, fileName);

            fileName.Replace(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar);

            plot.SavePng(fileName, 800, 600);
            return fileName;
        }

        private static async Task PrepareDataSet()
        {
            if (!File.Exists(UNIFORM_100_FILENAME))
            {
                double[] values = PrepareUniformData(100, _a, _b);

                await Utils.SaveValues(UNIFORM_100_FILENAME, values);
            }

            if (!File.Exists(UNIFORM_1000_FILENAME))
            {
                double[] values = PrepareUniformData(1000, _a, _b);

                await Utils.SaveValues(UNIFORM_1000_FILENAME, values);
            }

            if (!File.Exists(GAUSS_100_FILENAME))
            {
                double[] values = PrepareGaussData(100, _m, _sigma);

                await Utils.SaveValues(GAUSS_100_FILENAME, values);
            }

            if (!File.Exists(GAUSS_1000_FILENAME))
            {
                double[] values = PrepareGaussData(1000, _m, _sigma);

                await Utils.SaveValues(GAUSS_1000_FILENAME, values);
            }
        }


        /// <summary>
        /// подтоговка значений равномерно распределенной случайной величины
        /// </summary>
        /// <param name="count"> кол-во значений </param>
        /// <param name="a"> значение a для линейного преобразования </param>
        /// <param name="b"> значение b для линейного преобразования </param>
        /// <returns></returns>

        private static double[] PrepareUniformData(int count, double a = 0, double b = 1)
        {
            var values = Utils.GetUniformRandomValues(count).Select(v => UniformLinearTransform(v, a, b));

            return values.ToArray();
        }

        /// <summary>
        /// Линейное преобразование значения для элемента ряда равномерного распределения
        /// </summary>
        /// <param name="value"></param>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        private static double UniformLinearTransform(
            double value, 
            double a, 
            double b)
        {
            return a + value * (b - a);
        }

        

        private static double[] PrepareGaussData(int count, double m, double sigma)
        {
            var values = Utils.GetUniformRandomValues(count * 2);

            var ret = new double[count];

            for (int i = 0; i < count; i++)
            {
                ret[i] = CreateGaussValue(values[i], values[i + 1]);
            }

            ret = ret
                .Select(v => GaussLinearTransform(v, _m, _sigma))
                .ToArray();

            return ret;
        }

        
        /// <summary>
        /// Линейное преобразование элемента нормально распределеного ряда
        /// </summary>
        /// <param name="value"></param>
        /// <param name="m"></param>
        /// <param name="sigma"></param>
        /// <returns></returns>
        private static double GaussLinearTransform(
            double value,  
            double m, 
            double sigma)
        {
            return m + sigma * value;
        }


        /// <summary>
        /// распределение произведения двух независимых случайных величин, 
        /// одна из которых имеет распределение Релея, 
        /// а другая распределена по закону арксинуса, является нормальным
        /// </summary>
        /// <param name="uniformValue1"></param>
        /// <param name="uniformValue2"></param>
        /// <returns></returns>
        private static double CreateGaussValue(
            double uniformValue1, 
            double uniformValue2)
        {
            return Math.Sin(2 * Math.PI * uniformValue1)
                * Math.Sqrt(-2 * Math.Log(uniformValue2));
        }
    }
}

2. ./Metrics.cs
﻿using Lab2.Processing;
using System.Net.Http.Headers;
using System.Net.Sockets;

namespace Lab2
{
    internal class Metrics
    {
        public static DataSetMetrics CountMetrics(
            double[] values,
            int[] qValues)
        {
            var ret = new DataSetMetrics();

            ret.R = values.Max() - values.Min();

            ret.ExpectValue = values.Average();

            var sortedValues = values.ToList();
            
            sortedValues.Sort();

            if (sortedValues.Count % 2 == 0)
            {
                ret.Median = (sortedValues[sortedValues.Count / 2 - 1]
                    + sortedValues[sortedValues.Count / 2]) / 2;
            }
            else
            {
                ret.Median = sortedValues[sortedValues.Count / 2 - 1];
            }

            foreach (var q in qValues)
            {
                var statistics = BuildSegmentStatistics(values, q);

                ret.QSegmentStatistics.Add(q, statistics);
            }

            if (ret.QSegmentStatistics.Count != 0)
            {
                var elderStatistics = ret.QSegmentStatistics
                    .MaxBy(p => p.Key);

                var mainSegmentValues = elderStatistics.Value.Parts
                    .MaxBy(p => p.Value.Values.Length)
                    .Value.Values;

                if (mainSegmentValues.Length != 0)
                {
                    ret.Mode = mainSegmentValues.Order().ToArray()[mainSegmentValues.Length / 2];
                }                                   
            }

            ret.D = values
                .Select(v => Math.Pow(v - ret.ExpectValue, 2))
                .Sum() / (values.Length - 1);

            return ret;
        }

        private static SegmentStatistics BuildSegmentStatistics(
            double[] values,
            double q)
        {
            var max = values.Max();
            var min = values.Min();
            var r = max - min;

            var delta = r / q;

            var ret = new SegmentStatistics();

            for (int i = 1; i <= q; i ++)
            {
                var from = min + (i - 1) * delta;
                var to = min + i * delta;

                var part = new SegmentStatisticsPart();

                part.From = from;
                part.To = to;

                part.Values = values
                    .Where(v => v >= from 
                    && (v < to
                    || v == to
                    && i == q))
                    .ToArray();

                ret.Parts.Add(part.From, part);
            }

            ret.From = min;
            ret.To = max;

            return ret;
        }
    }
}

3. ./obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

4. ./obj/Debug/net8.0/Lab2.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Lab2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Lab2")]
[assembly: System.Reflection.AssemblyTitleAttribute("Lab2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Создано классом WriteCodeFragment MSBuild.


5. ./obj/Debug/net8.0/Lab2.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

6. ./Processing/DataSetMetrics.cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace Lab2.Processing
{
    internal class DataSetMetrics
    {
        public double R { get; set; }
        public double ExpectValue { get; internal set; }
        public double Mode { get; internal set; }
        public double Median { get; internal set; }

        public Dictionary<int, SegmentStatistics> QSegmentStatistics { get; set; } = new();
        public double D { get; internal set; }

        public double Sigma => Math.Sqrt(D);
    }
}

7. ./Processing/PlotBuilder.cs
﻿using ScottPlot;

namespace Lab2.Processing
{
    internal class PlotBuilder
    {
        public static Plot BuildGistogram(
            SegmentStatistics segmentStatistics)
        {
            var plot = new Plot();
            var bars = new List<Bar>();
            var ticks = new List<Tick>();

            int cnt = 0;

            foreach (var (from, part) in segmentStatistics.Parts)
            {
                cnt++;

                var x = part.From + (part.To - part.From) / 2;

                var bar = new Bar()
                {
                    Position = cnt,
                    Value = part.Values.Length,
                    ValueBase = 0,
                    Orientation = Orientation.Vertical,
                    //Size = 0
                };

                ticks.Add(new(cnt, cnt.ToString() + "\r\n" + bar.Value.ToString()));

                bars.Add(bar);
            }

            plot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks.ToArray());
            plot.Axes.Bottom.MajorTickStyle.Length = 0;
            plot.HideGrid();

            // tell the plot to autoscale with no padding beneath the bars
            plot.Axes.Margins(bottom: 0);

            var barsPlot = plot.Add.Bars(bars);

            return plot;
        }
    }
}

8. ./Processing/SegmentStatistics.cs
﻿namespace Lab2.Processing
{
    /// <summary>
    /// эмпирическая статистика для построения гистограммы и вычисления моды
    /// </summary>
    public class SegmentStatistics
    {
        public int PartsNumber { get => Parts.Count; }

        public double From { get; set; }

        public double To { get; set; }

        public SortedList<double, SegmentStatisticsPart> Parts { get; set; } = new();

        public int ValuesCount => Parts.Sum(p => p.Value.Values.Length);
    }
}

9. ./Processing/SegmentStatisticsPart.cs
﻿namespace Lab2.Processing
{
    public class SegmentStatisticsPart
    {
        public double From { get; set; }

        public double To { get; set; }

        public double[] Values { get; set; } = new double[0];
    }
}

