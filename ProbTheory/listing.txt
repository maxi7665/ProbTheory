1. ./DataSetMetrics.cs
﻿using Lab4;

namespace Core
{
    public class DataSetMetrics
    {
        /// <summary>
        /// Кол-во наблюдений
        /// </summary>
        public double N { get; set; }


        /// <summary>
        /// Размах
        /// </summary>
        public double R { get; set; }
        
        /// <summary>
        /// Математическое ожидание
        /// </summary>
        public double ExpectValue { get; internal set; }
        
        /// <summary>
        /// Мода
        /// </summary>
        public double Mode { get; internal set; }
        
        /// <summary>
        /// Медиана
        /// </summary>
        public double Median { get; internal set; }

        /// <summary>
        /// Статистика сегментированная (распреление для гистограммы)
        /// </summary>
        public Dictionary<int, SegmentStatistics> QSegmentStatistics { get; set; } = new();
        
        /// <summary>
        /// Дисперсия
        /// </summary>
        public double D { get; internal set; }

        /// <summary>
        /// СКО
        /// </summary>
        public double Sigma => Math.Sqrt(D);


        /// <summary>
        /// Коэффициент ассиметрии
        /// </summary>
        public double Skewness { get; internal set; }

        /// <summary>
        /// Коэффициент  эксцесса
        /// </summary>
        public double ExcessKurtosis { get; internal set; }

        /// <summary>
        /// Стандартная ошибка среднего
        /// </summary>
        public double StandardError { get; internal set; }

        /// <summary>
        /// Получить квантиль распределения Стьюдента
        /// </summary>
        /// <param name="a">Уровень значимости α</param>
        /// <returns></returns>
        public double GetTValue(double a)
        {
            var v = N - 1;

            return Student.GetT(a, v);
        }
    }
}

2. ./Metrics.cs
﻿namespace Core
{
    public class Metrics
    {
        public static DataSetMetrics CountMetrics(
            double[] values,
            int[] qValues)
        {
            var ret = new DataSetMetrics();

            ret.N = values.Length;

            ret.R = values.Max() - values.Min();

            ret.ExpectValue = values.Average();

            var sortedValues = values.ToList();

            sortedValues.Sort();

            if (sortedValues.Count % 2 == 0)
            {
                ret.Median = (sortedValues[sortedValues.Count / 2 - 1]
                    + sortedValues[sortedValues.Count / 2]) / 2;
            }
            else
            {
                ret.Median = sortedValues[sortedValues.Count / 2 - 1];
            }

            foreach (var q in qValues)
            {
                var statistics = BuildSegmentStatistics(values, q);

                ret.QSegmentStatistics.Add(q, statistics);
            }

            if (ret.QSegmentStatistics.Count != 0)
            {
                var elderStatistics = ret.QSegmentStatistics
                    .MaxBy(p => p.Key);

                var mainSegmentValues = elderStatistics.Value.Parts
                    .MaxBy(p => p.Value.Values.Length)
                    .Value.Values;

                if (mainSegmentValues.Length != 0)
                {
                    ret.Mode = mainSegmentValues.Order().ToArray()[mainSegmentValues.Length / 2];
                }
            }

            ret.D = values
                .Select(v => Math.Pow(v - ret.ExpectValue, 2))
                .Sum() / (values.Length - 1);

            ret.Skewness = GetCentralMoment(values, 3) / 
                Math.Pow(ret.Sigma, 3);

            ret.ExcessKurtosis = (GetCentralMoment(values, 4) /
                Math.Pow(ret.Sigma, 4)) - 3;

            ret.StandardError = ret.Sigma / Math.Sqrt(values.Length);

            return ret;
        }

        private static SegmentStatistics BuildSegmentStatistics(
            double[] values,
            double q)
        {
            var max = values.Max();
            var min = values.Min();
            var r = max - min;

            var delta = r / q;

            var ret = new SegmentStatistics();

            for (int i = 1; i <= q; i++)
            {
                var from = min + (i - 1) * delta;
                var to = min + i * delta;

                var part = new SegmentStatisticsPart();

                part.From = from;
                part.To = to;

                part.Values = values
                    .Where(v => v >= from
                    && (v < to
                    || v == to
                    && i == q))
                    .ToArray();

                ret.Parts.Add(part.From, part);
            }

            ret.From = min;
            ret.To = max;

            return ret;
        }

        /// <summary>
        /// Получить n-ый центральный момент
        /// </summary>
        /// <param name="values"></param>
        /// <param name="number"></param>
        /// <returns></returns>
        public static double GetCentralMoment(
            double[] values, 
            double number)
        {
            decimal sum = 0;
            decimal count = values.Length;

            var expect = values.Average();

            foreach (var value in values)
            {
                sum += (decimal)Math.Pow((value - expect), number);
            }

            return (double)(sum / count);
        }
    }
}

3. ./PlotBuilder.cs
﻿using ScottPlot;

namespace Core
{
    public class PlotBuilder
    {
        public static Plot BuildGistogram(
            SegmentStatistics segmentStatistics)
        {
            var plot = new Plot();
            var bars = new List<Bar>();
            var ticks = new List<Tick>();

            int cnt = 0;

            foreach (var (from, part) in segmentStatistics.Parts)
            {
                cnt++;

                var x = part.From + (part.To - part.From) / 2;

                var bar = new Bar()
                {
                    Position = cnt,
                    Value = part.Values.Length,
                    ValueBase = 0,
                    Orientation = Orientation.Vertical,
                    //Size = 0
                };

                ticks.Add(new(cnt, cnt.ToString() + "\r\n" + bar.Value.ToString()));

                bars.Add(bar);
            }

            plot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks.ToArray());
            plot.Axes.Bottom.MajorTickStyle.Length = 0;
            plot.HideGrid();

            // tell the plot to autoscale with no padding beneath the bars
            plot.Axes.Margins(bottom: 0);

            var barsPlot = plot.Add.Bars(bars);

            return plot;
        }
    }
}

4. ./PlotDescriptor.cs
﻿using ScottPlot;
using System.Reflection;

namespace Core
{
    public class PlotDescriptor
    {
        public List<PlotSegment> Segments { get; set; } = new();

        public double MinX { get; set; } = 0;

        public double MaxX { get; set; } = 1;

        public List<Coordinates> GetCoords(double fromX, double toX, double step = 0.01)
        {
            var ret = new SortedList<double, Coordinates>();

            foreach (var segment in Segments)
            {
                var segmentFromX = Math.Max(fromX, segment.MinX);
                var segmentToX = Math.Min(toX, segment.MaxX);

                double x = segmentFromX;

                for (int i = 0; x <= segmentToX ; i++)
                {
                    x = segmentFromX + (i * step);

                    var coords = new Coordinates(x, segment.Func(x));

                    ret.Add(x, coords);
                }
            }

            return ret.ToList().ConvertAll(v => v.Value);
        }
    }
}

5. ./PlotSegment.cs
﻿namespace Core
{
    /// <summary>
    /// Segment of plot
    /// </summary>
    public class PlotSegment
    {
        public Func<double, double> Func { get; set; } = (x) => x;

        public double MinX { get; set; } = double.MinValue;

        public double MaxX { get; set; } = double.MaxValue;

        public double Step { get; set; } = 0.01;

        public List<double> GetXCoords()
        {
            var ret = new List<double>();            

            for (double i = MinX; i <= MaxX; i += Step)
            {
                ret.Add(i);
            }

            return ret;
        }

        public List<double> GetYCoords()
        {
            var ret = GetXCoords().ConvertAll(x => Func(x));

            return ret;
        }

        public bool HasMapping(double x) => x <= MaxX && x >= MinX;
    }
}

6. ./Program.cs
﻿// See https://aka.ms/new-console-template for more information
using Core;
using ScottPlot;

Console.WriteLine("Hello, World!");

Plot myPlot = new();


var plotDescriptor = new PlotDescriptor();

var plotSegment = new PlotSegment()
{
    MinX = 0,
    MaxX = 1
};

plotDescriptor.Segments.Add(plotSegment);


plotDescriptor.Segments.Add(new PlotSegment()
{
    Func = (x) => 0,
    MaxX = -0.001
});

plotDescriptor.Segments.Add(new PlotSegment()
{
    Func = (x) => 0,
    MinX = 1.001
});

var values = plotDescriptor.GetCoords(-0.1, 1.1, 0.001);

var scatter = myPlot.Add.Scatter(
    values);

scatter.LineStyle.Width = 5;
scatter.MarkerStyle.Size = 5;

var fileName = "demo.png";

myPlot.SavePng(fileName, 800, 600);

Utils.OpenPath(fileName);

7. ./SegmentStatistics.cs
﻿namespace Core
{
    /// <summary>
    /// эмпирическая статистика для построения гистограммы и вычисления моды
    /// </summary>
    public class SegmentStatistics
    {
        public int PartsNumber { get => Parts.Count; }

        public double From { get; set; }

        public double To { get; set; }

        public SortedList<double, SegmentStatisticsPart> Parts { get; set; } = new();

        public int ValuesCount => Parts.Sum(p => p.Value.Values.Length);
    }
}

8. ./SegmentStatisticsPart.cs
﻿namespace Core
{
    public class SegmentStatisticsPart
    {
        public double From { get; set; }

        public double To { get; set; }

        public double[] Values { get; set; } = Array.Empty<double>();
    }
}

9. ./Student.cs
﻿namespace Lab4
{
    /// <summary>
    /// Code from https://www.meracalculator.com/math/t-distribution-critical-value-table.php
    /// </summary>
    public class Student
    {
        //easyRoundOf(resConvert(pStuT(bhname, df2)), 4);

        public static double GetT(double a, double v)
        {
            return resConvert(pStuT(a, v));
        }

        public static double stuT(double a, double b)
        {
            a = Math.Abs(a);

            var c = a / Math.Sqrt(b);
            var d = Math.Atan(c);

            if (1 == b)
            {
                return d / (Math.PI / 2);
            }

            var e = Math.Sin(d);
            var f = Math.Cos(d);

            var alpha = b % 2 == 1
                ? 1 - (d + e * f * stuComp(f * f, 2, b - 3, -1)) / (Math.PI / 2)
                : 1 - e * stuComp(f * f, 1, b - 3, -1);

            return 1.0 - alpha;
        }
        public static double stuComp(double a, double b, double c, double d)
        {
            double e = 1;
            var f = e;
            var g = b;
            for (; g <= c;)
            {
                e = e * a * g / (g - d);
                f += e;
                g += 2;
            }
            return f;
        }

        public static double pStuT(double a, double b)
        {
            var c = .5;
            var d = .5;
            double e = 0;

            for (; d > 1e-6;)
            {
                e = (double)1 / c - 1;
                d /= 2;

                var qt = 1 - stuT(e, b);

                if (qt > a)
                {
                    c -= d;
                }
                else
                {
                    c += d;
                }
            }

            return e;
        }
        public static double resConvert(double a)
        {
            //var b;
            return a >= 0 ? a + 5e-4 : a - 5e-4;
        }

        public static double easyRoundOf(double a, int b)
        {
            /*if (isNaN(a))
                return 0;*/

            var level = Math.Pow(10, b);

            var c = Math.Round(a * level) / level;

            return c;
        }
        /*function parseConv(a)
        {
            return parseFloat(a)
        }*/


    }
}

10. ./Utils.cs
﻿using Markdig;
using ScottPlot;
using System.Diagnostics;
using System.Text;

namespace Core
{
    public class Utils
    {
        public static void OpenPath(string fileName)
        {
            var processStart = new ProcessStartInfo()
            {
                FileName = "cmd",
                Arguments = $"/c {fileName}"
            };

            var process = new Process();

            process.StartInfo = processStart;

            process.Start();
        }

        public static double[] GetUniformRandomValues(int count)
        {
            var randomValues = new double[count];

            var random = new Random();

            for (int i = 0; i < count; i++)
            {
                randomValues[i] = random.NextDouble();
            }

            return randomValues;
        }

        public static async Task SaveValues(string fileName, double[] values)
        {
            await File.AppendAllLinesAsync(
                fileName, 
                values.Select(v => v.ToString()));
        }

        public static async Task<double[]> ReadValues(string fileName)
        {
            return (await File.ReadAllLinesAsync(fileName))
                .Select(double.Parse)
                .ToArray();
        }

        /// <summary>
        /// подтоговка значений равномерно распределенной случайной величины
        /// </summary>
        /// <param name="count"> кол-во значений </param>
        /// <param name="a"> значение a для линейного преобразования </param>
        /// <param name="b"> значение b для линейного преобразования </param>
        /// <returns></returns>

        public static double[] PrepareUniformData(int count, double a = 0, double b = 1)
        {
            var values = Utils.GetUniformRandomValues(count).Select(v => UniformLinearTransform(v, a, b));

            return values.ToArray();
        }

        /// <summary>
        /// Линейное преобразование значения для элемента ряда равномерного распределения
        /// </summary>
        /// <param name="value"></param>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static double UniformLinearTransform(
            double value,
            double a,
            double b)
        {
            return a + value * (b - a);
        }



        public static double[] PrepareGaussData(int count, double m, double sigma)
        {
            var values = Utils.GetUniformRandomValues(count * 2);

            var ret = new double[count];

            for (int i = 0; i < count; i++)
            {
                ret[i] = CreateGaussValue(values[i], values[i + 1]);
            }

            ret = ret
                .Select(v => GaussLinearTransform(v, m, sigma))
                .ToArray();

            return ret;
        }


        /// <summary>
        /// Линейное преобразование элемента нормально распределеного ряда
        /// </summary>
        /// <param name="value"></param>
        /// <param name="m"></param>
        /// <param name="sigma"></param>
        /// <returns></returns>
        public static double GaussLinearTransform(
            double value,
            double m,
            double sigma)
        {
            return m + sigma * value;
        }


        /// <summary>
        /// распределение произведения двух независимых случайных величин, 
        /// одна из которых имеет распределение Релея, 
        /// а другая распределена по закону арксинуса, является нормальным
        /// </summary>
        /// <param name="uniformValue1"></param>
        /// <param name="uniformValue2"></param>
        /// <returns></returns>
        public static double CreateGaussValue(
            double uniformValue1,
            double uniformValue2)
        {
            return Math.Sin(2 * Math.PI * uniformValue1)
                * Math.Sqrt(-2 * Math.Log(uniformValue2));
        }

        public static string BuildSegmentStatTableHtml(SegmentStatistics segmentStatistics)
        {
            MarkdownPipeline pipeline = new MarkdownPipelineBuilder()
                .UseAdvancedExtensions()
                .Build();

            var markdown = new StringBuilder();

            markdown.AppendLine("| Номер интервала  | x j  |  x j\\+1 |  n j  |");
            markdown.AppendLine("|------------------|------|--------|-------|");

            int cnt = 0;

            foreach (var segment in segmentStatistics.Parts)
            {
                cnt++;

                markdown.AppendLine($"| {cnt} | {Math.Round(segment.Value.From, 3)} | " +
                    $"{Math.Round(segment.Value.To, 3)} | {segment.Value.Values.Length} |");
            }

            markdown.AppendLine($"| Сумма |  |  | {segmentStatistics.ValuesCount} |");

            return Markdown.ToHtml(markdown.ToString(), pipeline);
        }
    }
}

